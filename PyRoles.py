"""PyRoles."""
import json
import hashlib
from configparser import ConfigParser
from os import remove
from flickrapi import FlickrAPI
from telebot import TeleBot

config = ConfigParser()
config.sections()
config.read('pyroles.conf')

# autenticando o flickr
api_key = config['FLICKR']['API_KEY']
api_secret = config['FLICKR']['API_SECRET']
flickr = FlickrAPI(api_key, api_secret)

if not flickr.token_valid(perms='delete'):
    flickr.get_request_token(oauth_callback='oob')
    authorize_url = flickr.auth_url(perms='delete')
    print(authorize_url)
    verifier = str(input('Verifier code: '))
    flickr.get_access_token(verifier)

# autenticando o bot
TOKEN = config['TGBOT']['TOKEN']
bot = TeleBot(TOKEN)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """Mensagem de inicializa√ß√£o do bot."""
    bot.send_chat_action(message.chat.id, 'typing')
    bot.reply_to(
        message,
        "Ol√°, eu sou o PyRol√™s[14]! \nEu consigo fazer uploads de todas as fotos dos rol√™s que aconteceram para o <a href='https://www.flickr.com/photos/160228175@N08/'>√°lbum PyRol√™s</a>.\nMas para isso acontecer, √© necess√°rio ter em mente algumas regras:\n‚ñ™Ô∏è O bot aceita apenas fotografias. Gifs e v√≠deos ainda n√£o s√£o suportados. Ah! E n√£o adianta enviar a foto como documento tamb√©m, eu s√≥ aceito 'ibagens'.\n‚ñ™Ô∏è N√£o envie imagens de pessoas caso elas n√£o queiram ou n√£o saibam. Vamos respeitar a vontade do amigo de n√£o querer a sua foto p√∫blica.üìµ\n‚ñ™Ô∏è N√£o envie nudes. Arrrr, vamos dizer que aqui n√£o √© o ambiente apropriado para voc√™ mostrar os seus dotes. \n‚ñ™Ô∏è Fotos com teor racista, homof√≥bico, violento, ou que infrinjam, de qualquer forma e maneira, o <a href='https://github.com/pythonbrasil/codigo-de-conduta'>C√≥digo de Conduta</a> do evento, ser√£o exclu√≠das, o usu√°rio identificado e banido.\n‚ñ™Ô∏èE lembre-se: \n\nPessoas >>> Tecnologia. \nUm √≥timo evento para voc√™!üíõüíô",  # NOQA
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


def check_duplicate(photo):
    """Checa se a imagem √© duplicada baseada no arquivo `hash_table.txt`."""
    with open('hash_table.txt', 'r') as file:
        data = file.read()

    with open(str(photo), 'rb') as file:
        data_foto = file.read()

    hash_photo = hashlib.md5(data_foto).hexdigest()
    hash_table = json.loads(data)

    if hash_photo in hash_table.values():
        return True

    else:
        hash_table[hash_photo] = hash_photo
        with open('hash_table.txt', 'w') as file:
            file.write(json.dumps(hash_table))
        return False


@bot.message_handler(content_types=['photo'])
def get_doc(message):
    """Salva a foto no sistema e faz upload da mesma para o flickr.

    TODO: separar essa fun√ß√£o em duas para evitar side effects
        em rela√ß√£o ao get do bot e ao upload.
    """
    bot.send_chat_action(message.chat.id, 'upload_photo')
    raw = message.photo[-1].file_id
    path = raw + ".jpg"
    file_info = bot.get_file(raw)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(path, 'wb') as new_file:
        new_file.write(downloaded_file)

    if not check_duplicate(path):
        bot.reply_to(
            message,
            "A sua fotografia agora faz parte do <a href='https://www.flickr.com/photos/160228175@N08/'>√°lbum PyRol√™s</a> ! \nObrigada por fazer essa comunidade ser t√£o maravilhosa!üíõüíô",  # NOQA
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        flickr.upload(
            filename=path,
            title='PyBR14',
            description='Python Brasil [14]'
        )
    else:
        bot.reply_to(message, "Foto duplicada.")

    remove(path)  # apaga a foto do servidor


bot.polling()
